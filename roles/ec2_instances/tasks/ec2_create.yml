    
#- set_fact:
#    ec2_details:
#      instances:
#          - private_ip: '10.1.200.121'

#- name: ec2_details debug
#  debug: msg="{{ec2_details_works}}"

# This is to get it out the door fast so I am deploying to a single subnet.
# Moose & I need to talk about how to handle distingusing between the 4
# subnets & which is public vs private.
- name: Create EC2 Instance(s) w/o subnets
  ec2:
    key_name: "{{master.keypair}}"
    group: "{{instance.security_group}}"
    region: "{{ item }}"
    instance_type: "{{instance.size}}"
    image: "{{instance.ami}}"
    wait: yes
    wait_timeout: "{{instance.wait_timeout}}"
    count: "{{instance.count}}"
    instance_tags: "{{instance.tags}}"
    vpc_subnet_id: "{{ec2_cloudformation_results[instance.subnet_dest_name]}}"
    assign_public_ip: "{{instance.public_ip}}"
    volumes: "{{instance.volumes}}"
  with_items: instance.regions
  register: ec2_details
  when: instance.regions is defined
  tags: 
    - create
  
- name: Create EC2 Instance(s) in specific subnets.
  ec2:
    key_name: "{{master.keypair}}"
    group: "{{instance.security_group}}"
    instance_type: "{{instance.size}}"
    image: "{{instance.ami}}"
    wait: yes
    wait_timeout: "{{instance.wait_timeout}}"
    count: "{{instance.count}}"
    instance_tags: "{{instance.tags}}"
    vpc_subnet_id: "{{ item }}"
    assign_public_ip: "{{instance.public_ip}}"
    volumes: "{{instance.volumes}}"
  with_items: "{{instance.subnets}}"
  register: ec2_details
  when: instance.subnets is defined 
  tags: 
    - create
  
- name: ec2_details debug
  debug: msg="{{ec2_details}}"
  
- name: ec2_details_instances
  debug: msg="{{ec2_details.instances}}"
  
- name: debug item loop
  debug: msg="{{item}}"
  with_items: "{{ec2_details.instances}}"
  
- name: debug ip addresses
  debug: msg="{{item.private_ip}}"
  with_items: "{{ec2_details.instances}}"
  
# host="{{item.private_ip}}"
- name: Wait for SSH to be available 
  local_action: 
    module: wait_for 
      host="{{item.public_ip}}"
      port=22
      delay=5
      timeout=300
  with_items: "{{ec2_details.instances}}"
  sudo: false
  tags: 
    - create

- name: Breathing room (Ansible uses python apt, has issues running directly after boot)
  pause: seconds=15
  tags: 
    - create

# Use with_items to add each instances public IP to a new hostgroup for use in the next play.
# local_action: add_host name="{{item.private_ip}}" groups=deploy_to
- name: Add new instances to host group
  local_action: add_host name="{{item.public_ip}}" groups="{{deploy_group_name}}"
  with_items: "{{ec2_details.instances}}"
    
    
    